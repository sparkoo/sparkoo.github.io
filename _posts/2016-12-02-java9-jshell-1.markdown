---
layout:     post
title:      "Java9 - jshell [1]"
date:       2016-12-2
categories: java9 jshell
---

Many languages have its own [REPL](Read–Eval–Print loop). Now, the time has grown to have one in Java. It will come with Java 9 under [JEP222]. What does it mean for us, developers? Many of you probably have already met with REPL in languages like Scala, Clojure, Groovy, Python, Ruby and many more. In short, it's basically a command line, where you can enter commands for specific programming language.

<!--more-->

![jshell]({{ site.url }}/assets/jshell/jshell.png)

## Why should I want it?
 - **microtesting** - We are always trying to get the quickest response loop possible. For now, the shortest loop is probably _unit test_ or to write a simple class with main and run it. With **JShell** we obtain a tool to shorten and simplify this loop for experimenting.
 - **teaching** - Imagine, you want to show your mom, what are you doing 10 hours a day in front of a computer. So you create a java file and start to write some strange words like `package`, `public`, `void`, `String` and many weird characters `(`, `)`, `;`... it's just too much and we didn't event get to the compilation. With Java 9, this will get much easier. You write `4+9`, hit enter, and it prints `13` -- easy!

## How it works ###
JShell is new executable binary in `bin` folder. It can be simply run like this

{% highlight bash %}
mvala[~/sw/jdk9/bin] λ ./jshell 
|  Welcome to JShell -- Version 9-internal
|  For an introduction type: /help intro


jshell> 
{% endhighlight %}

Now, JShell is ready to accept my commands. So let's start simple
{% highlight java %}
jshell> 1 + 2
$1 ==> 3
{% endhighlight %}

As expected, it can add two numbers. `$1 ==> 3` means, that result of the previous operation is implicitly stored in the variable `$1`. If I explicitly define name of the variable, it is used instead
{% highlight java %}
jshell> int i = 2 * 3
i ==> 6
{% endhighlight %}

Now I can work with these variables
{% highlight java %}
jshell> $1 + i
$3 ==> 9
{% endhighlight %}

Cool. I can create methods
{% highlight java %}
jshell> int add(int a, int b) {
   ...> return a + b;
   ...> }
|  created method add(int,int)

jshell> add(5, 6)
$2 ==> 11
{% endhighlight %}

or classes... Everything works as expected
{% highlight java %}
jshell> class Square {
   ...> private int side;
   ...> Square(int side) { this.side = side; }
   ...> int perimeter() { return 4 * side; }
   ...> int area() { return side * side; }
   ...> }
|  created class Square

jshell> Square s = new Square(4);
s ==> Square@7d9d1a19

jshell> s.area()
$8 ==> 16

jshell> s.side
|  Error:
|  side has private access in Square
|  s.side
|  ^----^
{% endhighlight %}

Basically, you can use any language constructs. And the great thing is, that most of the time, you don't have to use semicolons. But for example in method definitions, you have to use them. You can also ignore checked exceptions
{% highlight java %}
jshell> Thread.sleep(1500)

jshell> 
{% endhighlight %}

## Conclusion

That's it for the very basics. Next time, we will talk about things like autocompletion, customization, core java method calls, file save/load ...

[REPL]: https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop
[JEP222]: http://openjdk.java.net/jeps/222

{% if page.comments %}
<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://sparkoo-github-io.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
{% endif %}
