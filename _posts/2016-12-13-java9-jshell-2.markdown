---
layout:     post
title:      "Java9 - jshell [2]"
date:       2016-12-13
comments:   true
categories: java9 jshell
---

In the [first part] we've looked over absolute basics of **JShell**. Now, I'm going to show you another features, that can help you customize **JShell** and make working with it more easy and fun.

<!--more-->

![jshell]({{ site.url }}/assets/jshell/jshell.png) 

## Tab completion
No one can remember every single method in every class and programmers are, by nature, lazy people. You're probably used to tab completion from your linux/osx/windows/whatever terminal and good news is, that **JShell** can do it too. So let's look at it:

{% highlight java %}
jshell> System.
Logger                 LoggerFinder           arraycopy(             class                  
clearProperty(         console()              currentTimeMillis()    err                    
exit(                  gc()                   getLogger(             getProperties()        
getProperty(           getSecurityManager()   getenv(                identityHashCode(      
in                     inheritedChannel()     lineSeparator()        load(                  
loadLibrary(           mapLibraryName(        nanoTime()             out                    
runFinalization()      runFinalizersOnExit(   setErr(                setIn(                 
setOut(                setProperties(         setProperty(           setSecurityManager(    

jshell> System.out.
append(        checkError()   close()        equals(        flush()        format(        
getClass()     hashCode()     notify()       notifyAll()    print(         printf(        
println(       toString()     wait(          write(         

jshell> System.out.print
print(     printf(    println(   

jshell> System.out.println(
println(   

jshell> System.out.println(
{% endhighlight %}

As you can see, **JShell** helps you with listing methods. When I write `System.` and hit `Tab`, I'll get a list of all methods. So if I start writing name of a method, like `System.out.print`, I'll get all the methods, that start with `..print`. When only one possibility is left, **JShell** fills in the method name for me. For example `System.out.printl` + `Tab` -> `System.out.println(`.

Naturally, it works this way with all classes. Let's use our class Square from the first part of this article:

{% highlight java %}
jshell> class Square {
   ...> private int side;
   ...> Square(int side) { this.side = side; }
   ...> int perimeter() { return 4 * side; }
   ...> int area() { return side * side; }
   ...> }
|  created class Square

jshell> Square s = new Square(4)
s ==> Square@5622fdf

jshell> s.
area()        equals(       getClass()    hashCode()    notify()      notifyAll()   
perimeter()   toString()    wait(
{% endhighlight %}

## JShell commands
So far, we have used only java "commands". However, **JShell** can accept another type of commands. They must always start with `/` and it means, that I'm communicating with  **JShell**. Any other command means communication with the **JVM**.

So let's look what it offers. Of course tab completion works
{% highlight java %}
jshell> /
/!            /?            /classpath    /drop         /edit         /exit         
/help         /history      /imports      /list         /methods      /open         
/reload       /reset        /save         /set          /types        /vars
{% endhighlight %}

`/help` is useful, but it gives us way too much information, you can try it yourself. For each command, you can use `/help [command]` (e.g. `/help /list`) and you'll see detailed help for given command.

### Customization
There are 4 predefined modes of verbosity -- *silent*, *concise*, *normal* and *verbose*. Default is *normal*. If you want slightly less verbosity, *concise* is a good choice. You can also set your own mode, since there are many configuration options.


**Normal** is used in all previous examples. It's little too stretched for my taste, but it's decent default choice.
{% highlight java %}
jshell> /set feedback normal
|  Feedback mode: normal

jshell> 5
$13 ==> 5

jshell> int i = 6
i ==> 6

jshell> i
i ==> 6

jshell> System.out.println("Hello")
Hello
{% endhighlight %}


**Concise** is my favorite. It's more compact, but still prints everything what I need.
{% highlight java %}
jshell> /set feedback concise 
jshell> 5
$9 ==> 5
jshell> int i = 6
jshell> i
i ==> 6
jshell> System.out.println("Hello")
Hello
{% endhighlight %}


In **silent** mode, you can't even see any implicit variables, so if you want to see variable value, you have to print it.
{% highlight java %}
jshell> /set feedback silent
-> 5
-> int i = 6
-> i
-> System.out.println("Hello")
Hello
{% endhighlight %}


**Verbose** is way too chatty, in my opinion. It basically prints out second line with meaning of the first line, so maybe for newbies, it might be useful.
{% highlight java %}
jshell> /set feedback verbose
|  Feedback mode: verbose

jshell> 5
$5 ==> 5
|  created scratch variable $5 : int

jshell> int i = 6
i ==> 6
|  modified variable i : int
|    update overwrote variable i : int

jshell> i
i ==> 6
|  value of i : int

jshell> System.out.println("Hello")
Hello
{% endhighlight %}


**JShell** is much more customizable, than is demonstrated here. To see more customization options, check `/help /set` and you'll find out, there is really a lot of them.


### /history /list
Command `/history` prints all commands you have entered so far

{% highlight java %}
jshell> /history

int a = 5
class Point {
int x;
int y;
Point(int x, int y) {
this.x = x;
this.y = y;
}
}
Point p = new Point(2,4)
p.x
/drop a
a
/history
{% endhighlight %}

That's nothing surprising. Very similar option is `/list`, but using that, we can see the source of the snippets and only the valid ones. So if I dropped variable `a`, I can see it in `/history`, but not in `/list`
{% highlight java %}
jshell> /list

   2 : class Point {
       int x;
       int y;
       Point(int x, int y) {
       this.x = x;
       this.y = y;
       }
       }
   3 : Point p = new Point(2,4);
   4 : p.x
{% endhighlight %}

`/list` is much more powerful. It shows us snippet IDs, so we can ask for specific one and as you can see, it shows us also dropped variable `a`
{% highlight java %}
jshell> /list 3

   3 : Point p = new Point(2,4);

jshell> /list 1

   1 : int a = 5
{% endhighlight %}

To see what variables or methods we have defined, use `/v` or `/m`. To redo all steps, use `/reload`, and if you want to start from the beginning with the clean sheet, simple `/reset` will do the trick.

{% highlight java %}
jshell> int a = 5
a ==> 5

jshell> int b = 6
b ==> 6

jshell> int add(int a, int b) { return a + b; }
|  created method add(int,int)

jshell> add(a, b)
$4 ==> 11

jshell> /v
|    int a = 5
|    int b = 6
|    int $4 = 11

jshell> /m
|    printf (String,Object...)void
|    add (int,int)int

jshell> /list

   1 : int a = 5;
   2 : int b = 6;
   3 : int add(int a, int b) { return a + b; }
   4 : add(a, b)

jshell> /reload
|  Restarting and restoring state.
-: int a = 5;
-: int b = 6;
-: int add(int a, int b) { return a + b; }
-: add(a, b)

jshell> /list

   1 : int a = 5;
   2 : int b = 6;
   3 : int add(int a, int b) { return a + b; }
   4 : add(a, b)

jshell> /reset
|  Resetting state.

jshell> /v

jshell> /m
|    printf (String,Object...)void

jshell> /list


{% endhighlight %}

### /edit
Let's say, we want to change some variable/method. We can simply assign a new value to it, as you probably expected
{% highlight java %}
jshell> int i = 50
i ==> 50

jshell> int i = 55
i ==> 55

jshell> i = 60
i ==> 60

jshell> i
i ==> 60

jshell> void print() { System.out.println("Hello"); }
|  created method print()

jshell> print()
Hello

jshell> void print() { System.out.println("Hello World!"); }
|  modified method print()

jshell> print()
Hello World!
{% endhighlight %}

or we can use `/edit`. It opens beautifully ugly window
{% highlight java %}
jshell> /edit
{% endhighlight %}
![jshellEditPad]({{ site.url }}/assets/jshell/jshellEditPad.png)

You can see whole history there, but when you hit accept, it just evaluates changed snippets (lines). It won't reevaluate all affected snippets, which does make sense. So for example when I have 
{% highlight java %}
int a = 5;
int b = 6;
int c = a + b;
{% endhighlight %}
and I change a to `int a = 4`, `c` will be still `11`.

It's possible to edit just one variable/method with simple `/edit a`.


### /save /open
Last thing I want to show you is saving/reading to/from files. It's really easy and useful. To save current session enter `/save [filename]`

{% highlight java %}
jshell> int a = 5
a ==> 5

jshell> int b = 6
b ==> 6

jshell> int c = a + b
c ==> 11

jshell> /save example
{% endhighlight %}

This creates a file named "example" in the current folder, it looks as simple, as you might expect  
{% highlight java %}
mvala[~] Î» cat example 
int a = 5;
int b = 6;
int c = a + b;
{% endhighlight %}

and reading a file is the same
{% highlight java %}
jshell> /open example

jshell> /v
|    int a = 5
|    int b = 6
|    int c = 11

jshell> /list

   1 : int a = 5;
   2 : int b = 6;
   3 : int c = a + b;
{% endhighlight %}

## Conclusion

That's enough for now. We've seen some customization options, checked tab completion, file saving and reading, and a few other **JShell** commands. Next time, we'll explore stuff like *classpath*, *imports*, ...

[first part]: /java9-jshell-1

{% if page.comments %}
<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://sparkoo-github-io.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
{% endif %}
